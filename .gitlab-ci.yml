---
stages:
  - test
  - build

.create_multi_arch_image:
  image: docker:latest
  services:
   - name: docker:dind
     command: ["--experimental"]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 1
  before_script:
    - docker version
    - docker info | grep Registry
    - echo -n $DOCKER_REGISTRY_PASSWORD | docker login -u $DOCKER_REGISTRY_USER --password-stdin
    - docker info | grep Registry
    - echo $CI_REGISTRY_IMAGE
    - apk add curl
    - mkdir -vp ~/.docker/cli-plugins/
    - curl --silent -L "https://github.com/docker/buildx/releases/download/v0.9.1/buildx-v0.9.1.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use --name buildx-$CI_COMMIT_SHORT_SHA
    - docker buildx inspect --bootstrap
  after_script:
    - docker logout
    - docker rm buildx-$CI_COMMIT_SHORT_SHA --force
  tags:
    - dind

docker_build:
  extends: .create_multi_arch_image
  stage: build
  script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]
      then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      elif [ -n "$CI_COMMIT_TAG" ]
      then
        VERSION=$([[ $(echo $CI_COMMIT_REF_NAME | cut -d'-' -f1) == release ]] && echo $CI_COMMIT_REF_NAME | cut -d'-' -f2 || echo $CI_COMMIT_REF_NAME)
        tag=":$VERSION"
        echo "Running on tag release '$VERSION': tag = $tag"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker buildx build \
      --build-arg BUILD_VERSION=$CI_COMMIT_REF_NAME \
      --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
      --build-arg VCS_REF=$CI_COMMIT_SHORT_SHA \
      --platform linux/amd64 \
      --platform linux/arm64 \
      --tag "$DOCKERHUB_IMAGE${tag}" \
      --push image
    - docker manifest inspect $DOCKERHUB_IMAGE${tag}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH      # Run code quality job in pipelines on the default branch (but not in other branch pipelines)
    - if: $CI_COMMIT_TAG                               # Run code quality job in pipelines for tags
    - changes:
      - image/**/*
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
