---
stages:
  - test
  - unit-tests
  - build

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

.create_multi_arch_image:
  image: docker:24.0.7
  services:
   - name: docker:24.0.7-dind
     command: ["--experimental"]
     alias: 'docker'
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 1
  before_script:
    - docker version
    - echo -n $DOCKER_REGISTRY_PASSWORD | docker login -u $DOCKER_REGISTRY_USER --password-stdin
    - echo $CI_REGISTRY_IMAGE
    - apk add curl
    - mkdir -vp ~/.docker/cli-plugins/
    - curl --silent -L "https://github.com/docker/buildx/releases/download/v0.11.2/buildx-v0.11.2.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --driver=docker-container --use --name job-$CI_JOB_ID
    - docker buildx inspect --bootstrap
  after_script:
    - docker logout
    - docker rm buildx_buildkit_job-${CI_JOB_ID}0 --force || true
  tags:
    - cq-sans-dind

docker_build:
  extends: .create_multi_arch_image
  stage: build
  script:
    - build_tags=""
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]
      then
        echo "Running on default branch '$CI_DEFAULT_BRANCH': ${DOCKERHUB_IMAGE}:latest"
        # Build Multi Arch Images and push to dockerhub
        docker buildx build --build-arg BUILD_VERSION=$CI_COMMIT_REF_NAME --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg VCS_REF=$CI_COMMIT_SHORT_SHA --push --platform linux/amd64,linux/arm64 --tag ${DOCKERHUB_IMAGE}:latest  image
        # Inspect Docker Manifest
        docker manifest inspect ${DOCKERHUB_IMAGE}:latest
      elif [ -n "$CI_COMMIT_TAG" ]
      then
        MAJOR_VERSION=$(echo "$CI_COMMIT_TAG" | awk -F'.' '{print $1}')
        MAJOR_MINOR_VERSION=$(echo "$CI_COMMIT_TAG" | awk -F'.' '{print $1"."$2}')
        echo "Version: ${VERSION}, Major Version: ${MAJOR_VERSION}, Major Minor Version: ${MAJOR_MINOR_VERSION}"
        echo "Running on tag '$CI_COMMIT_TAG': ${DOCKERHUB_IMAGE}:${CI_COMMIT_TAG}"
        # Build Multi Arch Images and push to dockerhub
        docker buildx build --build-arg BUILD_VERSION=$CI_COMMIT_REF_NAME --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg VCS_REF=$CI_COMMIT_SHORT_SHA --push --platform linux/amd64,linux/arm64 --tag $DOCKERHUB_IMAGE:$CI_COMMIT_TAG --tag $DOCKERHUB_IMAGE:$MAJOR_VERSION --tag $DOCKERHUB_IMAGE:$MAJOR_MINOR_VERSION image
        # Inspect Docker Manifest
        docker manifest inspect $DOCKERHUB_IMAGE:$CI_COMMIT_TAG
        docker manifest inspect $DOCKERHUB_IMAGE:$MAJOR_VERSION
        docker manifest inspect $DOCKERHUB_IMAGE:$MAJOR_MINOR_VERSION
      else
        echo "Running on branch '$CI_COMMIT_BRANCH': ${DOCKERHUB_IMAGE}:${CI_COMMIT_REF_SLUG}"
        # Build Multi Arch Images and push to dockerhub
        docker buildx build --build-arg BUILD_VERSION=$CI_COMMIT_REF_NAME --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg VCS_REF=$CI_COMMIT_SHORT_SHA --push --platform linux/amd64,linux/arm64 --tag $DOCKERHUB_IMAGE:$CI_COMMIT_REF_SLUG  image
        # Inspect Docker Manifest
        docker manifest inspect ${DOCKERHUB_IMAGE}:${CI_COMMIT_REF_SLUG}
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: ('$CI_PIPELINE_SOURCE == "merge_request_event"' && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH)
      changes:
        - image/Dockerfile
        - .gitlab-ci.yml
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - image/**/*
        - .gitlab-ci.yml
    - if: $CI_COMMIT_TAG
      changes:
        - image/**/*
