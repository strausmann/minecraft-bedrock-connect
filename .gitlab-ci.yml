---
stages:
  - lint
  - build
  - test
  - release

variables:
  http_proxy: ''
  https_proxy: ''
  no_proxy: ''
  BUILDX_VERSION: "v0.24.0"  # ðŸ›  Version von Renovate aktualisieren lassen

mega-linter:
  stage: lint
  # You can override MegaLinter flavor used to have faster performances
  # More info at https://megalinter.github.io/flavors/
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/oxsecurity/megalinter:v8
  before_script: []
  script: ['true'] # if script: ["true"] does not work, you may try ->  script: [ "/bin/bash /entrypoint.sh" ]
  variables:
    # All available variables are described in documentation
    # https://megalinter.github.io/configuration/
    DEFAULT_WORKSPACE: $CI_PROJECT_DIR
    # ADD YOUR CUSTOM ENV VARIABLES HERE TO OVERRIDE VALUES OF .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
  artifacts:
    when: always
    paths:
      - megalinter-reports
    expire_in: 1 week
  allow_failure: false
  tags:
    - dind
  rules:
    # Trigger bei jedem Push in einen Branch
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH

.create_multi_arch_image:
  image: docker:28.4.0
  services:
    - name: docker:28.4.0-dind
      command: ['--experimental']
      alias: 'docker'
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 1
    BUILDPLATFORM: linux/amd64,linux/arm64
  before_script:
    - docker version
    - echo -n $DOCKER_REGISTRY_PASSWORD | docker login -u $DOCKER_REGISTRY_USER --password-stdin
    # Install curl and the Docker Scout CLI and Buildx
    - |
      apk add --update curl
      curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
      rm -rf /var/cache/apk/*
      mkdir -vp ~/.docker/cli-plugins/
      curl --silent -L "https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
      curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
      chmod a+x ~/.docker/cli-plugins/docker-buildx
    # Login to Docker Hub required for Docker Scout CLI
    - docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
    # Starting QEMU User Static Container and Build the MultiArch Container
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --driver=docker-container --use --name job-$CI_JOB_ID
    - docker buildx inspect --bootstrap
  after_script:
    - docker logout
    - docker rm buildx_buildkit_job-${CI_JOB_ID}0 --force || true
  tags:
    - cq-sans-dind

docker_build:
  extends: .create_multi_arch_image
  stage: build
  script:
    - build_tags=""
    - |
      if [ -n "$CI_COMMIT_TAG" ]
      then
        MAJOR_VERSION=$(echo "$CI_COMMIT_TAG" | awk -F'.' '{print $1}')
        MAJOR_MINOR_VERSION=$(echo "$CI_COMMIT_TAG" | awk -F'.' '{print $1"."$2}')
        echo "Version: ${VERSION}, Major Version: ${MAJOR_VERSION}, Major Minor Version: ${MAJOR_MINOR_VERSION}"
        echo "Running on tag '$CI_COMMIT_TAG': ${DOCKERHUB_IMAGE}:${CI_COMMIT_TAG}"
        # Build Multi Arch Images and push to dockerhub
        docker buildx build --provenance=true --sbom=true --build-arg BUILD_VERSION=$CI_COMMIT_REF_NAME --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg VCS_REF=$CI_COMMIT_SHORT_SHA --build-arg CI_BUILD=$CI_PIPELINE_ID --push --platform $BUILDPLATFORM --tag $DOCKERHUB_IMAGE:$CI_COMMIT_TAG --tag $DOCKERHUB_IMAGE:$MAJOR_VERSION --tag $DOCKERHUB_IMAGE:$MAJOR_MINOR_VERSION --tag $DOCKERHUB_IMAGE:latest image
        # Compare image from branch with latest image from the default branch and fail if new critical or high CVEs are detected
        docker scout compare "${DOCKERHUB_IMAGE}:${CI_COMMIT_TAG}" --to "$CI_REGISTRY_IMAGE:latest" --exit-on vulnerability --only-severity critical,high --ignore-unchanged --only-fixed --org strausmann
        # Inspect Docker Manifest
        docker manifest inspect $DOCKERHUB_IMAGE:$CI_COMMIT_TAG
        docker manifest inspect $DOCKERHUB_IMAGE:$MAJOR_VERSION
        docker manifest inspect $DOCKERHUB_IMAGE:$MAJOR_MINOR_VERSION
        docker manifest inspect $DOCKERHUB_IMAGE:latest
      else
        echo "Running on branch '$CI_COMMIT_BRANCH': ${DOCKERHUB_IMAGE}:${CI_COMMIT_REF_SLUG}"
        # Build Multi Arch Images and push to dockerhub
        docker buildx build --provenance=true --sbom=true --build-arg BUILD_VERSION=$CI_COMMIT_REF_NAME --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg VCS_REF=$CI_COMMIT_SHORT_SHA --build-arg CI_BUILD=$CI_PIPELINE_ID --push --platform $BUILDPLATFORM --tag $DOCKERHUB_IMAGE:$CI_COMMIT_REF_SLUG  image
        # Get a CVE report for the built image and fail the pipeline when critical or high CVEs are detected
        docker scout cves "${DOCKERHUB_IMAGE}:${CI_COMMIT_REF_SLUG}" --exit-code --only-severity critical,high --only-fixed --org strausmann
        # Inspect Docker Manifest
        docker manifest inspect ${DOCKERHUB_IMAGE}:${CI_COMMIT_REF_SLUG}
      fi
  rules:
    # Trigger bei jedem Push in einen Branch, wenn sich Container Image Ã¤ndert
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
      changes:
        - image/**/*
        - .gitlab-ci.yml
    # Trigger bei einem TAG Release, wenn sich Container Image Ã¤ndert
    - if: '$CI_COMMIT_TAG'
      changes:
        - image/**/*
        - .gitlab-ci.yml

sonarcloud-check:
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  stage: test
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  tags:
    - dind
  rules:
    # Trigger bei jedem Push in einen Branch
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH

release:
  image: node:22.20.0@sha256:4973262386dc1cb70f7d6fc48a855027d8f12d2d3b1fe559b9db9a4fcb74668f
  stage: release
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
  before_script:
    - npm ci --cache .npm --prefer-offline
    - git status
    - git log -1 --name-only
  script:
    - npx --no-install semantic-release
  after_script:
    - 'echo Stage - Release finished'
  rules:
    # Trigger eines Scheduled Task
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    # Trigger bei jedem Push in einen Branch, bis auf den Main Branch
    - if: '$CI_COMMIT_BRANCH'
      when: never
    # Trigger nach einem Commit in einen Merge Request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    # Niemals doppelte Pipelines wenn man einen Merge Request erstellt hat
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
